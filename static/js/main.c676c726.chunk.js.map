{"version":3,"sources":["components/Navbar/Navbar.jsx","components/Instructions/Instructions.jsx","components/Catcard/Catcard.jsx","components/Wrapper/Wrapper.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","href","message","indexOf","style","color","curScore","topScore","Title","Catcard","alt","name","src","image","onClick","selectCat","Wrapper","children","App","state","cats","unselectedCats","shuffleArray","array","i","length","j","Math","floor","random","_ref","undefined","_this","find","item","setState","newCats","filter","_this2","this","components_Wrapper_Wrapper","components_Navbar_Navbar","Instructions_Instructions","map","cat","components_Catcard_Catcard","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c676c726.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n    <div>\n    <ul className=\"nav nav-pills nav-justified\">\n        <li><a href=\"/\">Click-a-Cat!</a></li>\n        <li\n            className={props.message.indexOf('incorrectly') !== -1 ? \n                \"desc-incorrect\" : \n                props.message.indexOf('correctly') !== -1 ?\n                    \"desc-correct\" :\n                    \"desc-normal\"} >\n            {props.message} \n        </li>\n        <li>Score: <span style={{color: \"yellow\"}}>{props.curScore}</span> | Top Score: {props.topScore}</li>\n    </ul>\n</div>\n);\n\nexport default Navbar;","import React from \"react\";\nimport \"./Instructions.css\";\n\nconst Title = props => (\n    <div className=\"titlebox\">\n        <h1>Click-a-cat!</h1>\n        <p>Click on an image to earn points, but don't click on any more than once!</p>\n    </div>\n);\nexport default Title;","import React from \"react\";\nimport \"./Catcard.css\";\n\nconst Catcard = props => (\n  <div className=\"card\">\n  <div className=\"img-container\">\n          <img alt={props.name} src={props.image} onClick={() => props.selectCat(props.name)} />\n  </div>\n</div>\n);\n\nexport default Catcard;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React, { Component } from \"react\";\nimport cats from \"./cats.json\";\nimport Navbar from \"./components/Navbar\";\nimport Instructions from \"./components/Instructions\";\nimport Catcard from \"./components/Catcard\";\nimport Wrapper from \"./components/Wrapper\";\n\nclass App extends Component {\n    state = {\n        message: \"Click an image to begin!\",\n        topScore: 0,\n        curScore: 0,\n        cats: cats,\n        unselectedCats: cats\n    }\n\n    componentDidMount() {\n    }\n\n    shuffleArray = array => {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    selectCat = name => {\n        const findCat = this.state.unselectedCats.find(item => item.name === name);\n\n        if(findCat === undefined) {\n            \n            this.setState({ \n                message: \"You guessed incorrectly!\",\n                topScore: (this.state.curScore > this.state.topScore) ? this.state.curScore : this.state.topScore,\n                curScore: 0,\n                cats: cats,\n                unselectedCats: cats\n            });\n        }\n        else {\n\n            const newCats = this.state.unselectedCats.filter(item => item.name !== name);\n            \n            this.setState({ \n                message: \"You guessed correctly!\",\n                curScore: this.state.curScore + 1,\n                cats: cats,\n                unselectedCats: newCats\n            });\n        }\n\n        this.shuffleArray(cats);\n    };\n\n    render() {\n        return (\n            <Wrapper>\n                <Navbar\n                    message={this.state.message}\n                    curScore={this.state.curScore}\n                    topScore={this.state.topScore}\n                />\n                <Instructions />\n                {\n                    this.state.cats.map(cat => (\n                        <Catcard\n                            name={cat.name}\n                            image={cat.image}\n                            selectCat={this.selectCat} \n                            curScore={this.state.curScore}\n                        />\n                    ))\n                }\n            </Wrapper>\n        );\n    }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}